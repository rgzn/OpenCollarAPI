openapi: 3.0.1
info:
  version: 0.1.0
  title: Open Collar API
  description: |-
    This is the template specification and documentation for the OpenCollarAPI.
    
    # OpenAPI Specification #
    This API is documented in **OpenAPI format** and is based on
    [Petstore sample](http://petstore.swagger.io/) provided by 
    [swagger.io](http://swagger.io) team.
    Documentation html is generated with 
    [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) and 
    [ReDoc](https://github.com/Rebilly/ReDoc)
    
    # OpenCollarAPI #
    This is a proposed universal standard API for GPS collar data access. 
    This API specification details the minimum set of calls required to meet the
    universal open standard. Collar data providers may provide more calls to
    meet their needs so long as they implement the API detailed in this
    standard. Additional calls should still be in the Open API format. 
    You can find out more about OpenAPI at [http://swagger.io](http://swagger.io) 
    
    # Authentication #
    OpenCollarAPI offers two main forms of authentication:
      - API Key
      - basicAuth and cookieAuth
      The latter option is actually two forms of authentication used in conjunction. 
      The client first authenticates with a username and password using the 
      user/login path. The response to a successful request on this path is a cookie
      with an authentication key. Then the user can submit that key via cookie
      as authentication on subsequent requests.
    
    <security-definitions /> 
  
  license:
    name: GPLv3
  contact:
    name: JMW
    url: http://github.com/rgzn/OpenCollarAPI
    email: jonathan.weissman@wildlife.ca.gov
externalDocs:
  description: File format specs and additional docs
  url: 'https://github.com/rgzn/OpenCollarAPI'
security:
  - apiKeyAuth: []
  - basicAuth: []
  - cookieAuth: []
tags:
  - name: devices
    description: |-
      These operations are for accessing information on the user's devices. This
      includes Collars, other GPS tags, VITs, or any other devices that push
      data to the server. 
  - name: positions
    description: |-
      These operations are for accessing position data from GPS devices. They
      are split up based on the how the data is selected, and the format of the
      returned data. Some of the calls in this sections return CSV files instead
      of JSON responses. The format for the CSV is specified in the external
      documentation. 
    externalDocs:
      url: 'http://opencollarapi.org/csv-format'
  - name: alerts
    description: |-
      Operations related to accessing alert records. This includes mortality
      notifications, VIT notifications, etc.
  - name: user
    description: |-
      Operations related to the user's account, such as authentication or
      accessing ones own account status. 
paths:
  /devices:
    get:
      summary: Returns a list of devices such as collars or tags.
      description: |-
        Request to generate list of the devices available to the user. This
        requests should return an array of Device data. The user can use this to
        get all the information about their available devices.
      operationId: listDevices
      tags:
        - devices
      responses:
        '200':
          description: An array of devices
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Devices'
        '400':
          description: No permission
  '/devices/{deviceId}':
    get:
      summary: Get the information about a specific device
      description: Returns the detailed info on a specific GPS device.
      operationId: showDeviceById
      tags:
        - devices
      parameters:
        - name: deviceId
          in: path
          required: true
          description: 'The id of the device to retrieve, eg. unique collar SN'
          schema:
            type: string
      responses:
        '200':
          description: Respond with info for requested device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /positions/findByDate:
    get:
      summary: 'gets fix data by fix dates, and optionaly, device ID'
      description: |-
        Uses the GPS date to select data, as opposed to upload date. Without
        deviceID params, fixes from all user's devices are returned.
      operationId: getPositionsByDate
      tags:
        - positions
      parameters:
        - $ref: '#/components/parameters/fromDatetimeParam'
        - $ref: '#/components/parameters/toDatetimeParam'
        - $ref: '#/components/parameters/deviceIdParam'
      responses:
        '200':
          $ref: '#/components/responses/positionRecordsJSON'
  /positions/findByUploadDate:
    get:
      summary: 'gets fix data by upload date, and optionaly, device ID'
      description: |-
        Uses the date that the data was made available on the server, rather
        than the actual timestamps of the data. This is useful for scheduled
        downloads because it prevents the user missing delayed data. Without
        deviceID params, fixes from all user's devices are returned.
      operationId: getPositionsByUploadDate
      tags:
        - positions
      parameters:
        - $ref: '#/components/parameters/fromDatetimeParam'
        - $ref: '#/components/parameters/toDatetimeParam'
        - $ref: '#/components/parameters/deviceIdParam'
      responses:
        '200':
          $ref: '#/components/responses/positionRecordsJSON'
  /alerts:
    get:
      summary: |-
        returns list of alerts. 
      description: |- 
        With no parameters or subpaths this applies to all devices that belong 
        to the user. Returns list of Alert objects, these can be alerts relating
        to mortality, geofences, drop-offs, etc.
      tags:
        - alerts
      operationId: listAlerts
      responses:
        '200':
          description: An array of alerts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alerts'
        '400':
          description: No permission
  /user/login:
    post:
      summary: Logs in and returns authentication cookie
      description: |- 
        Post command to log in using basicAuth authentication. Upon success,
        the response should suppply a Set-Cookie header that allows for
        subsequent authorization using the cookieAuth method. This is the
        typical authorization process for web users. An alternative api-key 
        method is also available, using pre-defined api-keys. 
      operationId: userLogin
      tags:
        - user
      requestBody:
        required: true
        description: a JSON object containing login and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security: []
      responses:
        '200':
          description: |-
            Successfully authenticated. The session ID is returned in a cookie
            named `SESSION_ID`. Client must include this cookie in subsequent
            requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSION_ID=abcde12345; Path=/; HttpOnly
        '401':
          $ref: '#/components/responses/Unauthorized'
components:
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    positionRecordsJSON:
      description: A JSON array of the requested position records
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Positions'
  parameters:
    deviceIdParam:
      name: deviceId
      in: query
      description: |-
        This query parameter specifies a single device ID to fetch data from. To
        fetch for multiple devices, multiple deviceID params can be passed
      required: false
      schema:
        type: string
      explode: true
    fromDatetimeParam:
      name: from
      description: |-
        This query parameter specifies the the minimum timestamp for the
        requested data. It is in ISO 8691 format eg. 2018-11-22T18:30:00Z
      in: query
      required: true
      schema:
        type: string
        format: date-time
    toDatetimeParam:
      name: to
      description: |-
        This query parameter specifies the the maximum timestamp for the
        requested data. It is in ISO 8691 format eg. 2018-11-22T18:30:00Z
      in: query
      required: true
      schema:
        type: string
        format: date-time
  schemas:
    Position:
      description: |-
        This contains all the data recorded for a single GPS fix generated by a
        GPS tag.
      required:
        - id
        - deviceId
        - timestamp
        - uploadTimestamp
        - lat
        - lon
        - altitude
        - dop
      properties:
        id:
          type: integer
          description: 'For a given device, this id should be unique to this record'
        deviceId:
          type: string
          description: |-
            This is the unique string identifying the device that produced this
            record. It should match the id field from the Device object
        timestamp:
          type: string
          format: date-time
          description: 'fix time in ISO 8691 format eg. `2018-11-22T18:30:00Z`'
        uploadTimestamp:
          type: string
          format: date-time
          description: |-
            This is the time this fix was made available on the server. in ISO
            8691   format eg. `2018-11-22T18:30:00Z`
        lat:
          type: number
          description: in decimal degrees
        lon:
          type: number
          description: in decimal degrees
        altitude:
          type: number
          description: in meters
        dop:
          type: number
        voltage:
          type: number
        voltageBackup:
          type: number
        temperature:
          type: number
          description: in degrees C
    Positions:
      description: |-
        An array of Position objects. It is used in responses to any request
        that ask for sets of GPS data. It can be used in generating responses in
        JSON, CSV, or GPX formats.
      type: array
      items:
        $ref: '#/components/schemas/Position'
    Alert:
      description: |-
        An Alert is a record of a tag event, not a GPS fix. Tag events include
        mortality detections, drop-offs, battery alerts, geofence crossings,
        etc.
      required:
        - id
        - deviceId
        - timestamp
        - uploadTimestamp
        - name
      properties:
        id:
          type: integer
          description: 'For a given device, this id should be unique to this record'
        deviceId:
          type: string
          description: |-
            This is the unique string identifying the device that produced this
            record. It should match the id field from the Device object
        timestamp:
          type: string
          format: date-time
          description: 'fix time in ISO 8691 format eg. `2018-11-22T18:30:00Z`'
        uploadTimestamp:
          type: string
          format: date-time
          description: |-
            This is the time this alert was made available on the server. in ISO
            8691   format eg. `2018-11-22T18:30:00Z`
        name:
          type: string
          description: 'The Alert Name, ie Mortality, Geofence, Dropoff, etc'
        lat:
          type: number
          description: |-
            optional coordinate for position-triggered alert (in decimal
            degrees)
        lon:
          type: number
          description: |-
            optional coordinate for position-triggered alert (in decimal
            degrees)
        optionalInfo:
          type: string
          description: any extra info related to the specific alert
    Alerts:
      description: |-
        An array of Alert objects. It is used in responses to any request that
        asks for sets of alert data. It can be used in generating responses in
        JSON or CSV formats.
      type: array
      items:
        $ref: '#/components/schemas/Alert'
    Device:
      description: |-
        Information about a specific GPS tag or collar. This data object should
        contain all the static information about a specific collar.
      required:
        - id
        - manufacturer
        - model
      properties:
        id:
          type: string
        manufacturer:
          type: string
        model:
          type: string
        status:
          type: string
        lastUpdate:
          type: string
          format: date-time
          description: |-
            time of most recent upload from this device in ISO 8691 format eg.
            `2018-11-22T18:30:00Z`
        groupID:
          type: integer
        geofenceIds:
          type: array
          items:
            type: integer
    Devices:
      description: |-
        An array of Device data objects. Can be returned as a JSON or CSV
        object.
      type: array
      items:
        $ref: '#/components/schemas/Device'
    Error:
      description: Messages to return to invalid requests.
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    LoginRequest:
      description: Login and Password object for initial authentication
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSION_ID
